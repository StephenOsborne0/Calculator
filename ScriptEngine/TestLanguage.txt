GRAMMAR
=======
exprnString = instruction {exprn} {;exprnString}
exprn = {(} lhs {operator rhs} {)}
lhs = value | exprn
rhs = value | exprn
variable = value
value = number | string | boolean | tableName
number = int | float | binary | hexadecimal | octal
float = int.int+{^{int}+}
double = int.int+
binary = 0b[ 1 | 0 ]+
hexadecimalChar = 0x[ int | A | B | C | D | E | F | a | b | c | d | e | f ]+
octalDigit = 0q[ 1 | 2 | 3 | 4 | 5 | 6 | 7 | A | B | C | D | E | F | a | b | c | d | e | f ]+
string = doubleQuoteString | singleQuoteString
doubleQuoteString = "text"
singleQuoteString = 'text'
whitespace = [ \t | ' ' ]*
newLine = \n
carriageReturn = \r
text = [ alphaChar | whitespace | string ]*
alphaChar = [ lowercaseAlpha | uppercaseAlpha ]
int = [ 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 ]+
lowercaseAlpha = a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
uppercaseAlpha = A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z
operator = +, -, *, /, |, &, ||, &&, <, >, <=, >=, <<, >>, !, %, ^, =, ~, :, ?, .
quotes = ' | "
symbols = £, $, _, @, #, \, ¬, `
tableName = '['text']'
instruction = 


ORDER OF OPERATIONS
===================
exprn
assignment
ternary
logicalOr
logicalAnd
bitwiseOr
bitwiseXor
bitwiseAnd
equality
comparison
bitshift
add
multiply
unary
base